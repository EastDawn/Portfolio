#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ClubWebDB")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region 可扩展性方法定义
  partial void OnCreated();
  partial void InsertComment(Comment instance);
  partial void UpdateComment(Comment instance);
  partial void DeleteComment(Comment instance);
  partial void InsertFeed(Feed instance);
  partial void UpdateFeed(Feed instance);
  partial void DeleteFeed(Feed instance);
  partial void InsertStudentReference(StudentReference instance);
  partial void UpdateStudentReference(StudentReference instance);
  partial void DeleteStudentReference(StudentReference instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ClubWebDBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Comment> Comment
	{
		get
		{
			return this.GetTable<Comment>();
		}
	}
	
	public System.Data.Linq.Table<Feed> Feed
	{
		get
		{
			return this.GetTable<Feed>();
		}
	}
	
	public System.Data.Linq.Table<StudentReference> StudentReference
	{
		get
		{
			return this.GetTable<StudentReference>();
		}
	}
	
	public System.Data.Linq.Table<User> User
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FeedID;
	
	private int _CommentNumber;
	
	private string _CommentText;
	
	private string _CommenterID;
	
	private System.DateTime _CommentTime;
	
	private bool _CommentStatus;
	
	private EntityRef<Feed> _Feed;
	
	private EntityRef<User> _User;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedIDChanging(int value);
    partial void OnFeedIDChanged();
    partial void OnCommentNumberChanging(int value);
    partial void OnCommentNumberChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    partial void OnCommenterIDChanging(string value);
    partial void OnCommenterIDChanged();
    partial void OnCommentTimeChanging(System.DateTime value);
    partial void OnCommentTimeChanged();
    partial void OnCommentStatusChanging(bool value);
    partial void OnCommentStatusChanged();
    #endregion
	
	public Comment()
	{
		this._Feed = default(EntityRef<Feed>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int FeedID
	{
		get
		{
			return this._FeedID;
		}
		set
		{
			if ((this._FeedID != value))
			{
				if (this._Feed.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFeedIDChanging(value);
				this.SendPropertyChanging();
				this._FeedID = value;
				this.SendPropertyChanged("FeedID");
				this.OnFeedIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentNumber", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CommentNumber
	{
		get
		{
			return this._CommentNumber;
		}
		set
		{
			if ((this._CommentNumber != value))
			{
				this.OnCommentNumberChanging(value);
				this.SendPropertyChanging();
				this._CommentNumber = value;
				this.SendPropertyChanged("CommentNumber");
				this.OnCommentNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentText", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
	public string CommentText
	{
		get
		{
			return this._CommentText;
		}
		set
		{
			if ((this._CommentText != value))
			{
				this.OnCommentTextChanging(value);
				this.SendPropertyChanging();
				this._CommentText = value;
				this.SendPropertyChanged("CommentText");
				this.OnCommentTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommenterID", DbType="Char(10) NOT NULL", CanBeNull=false)]
	public string CommenterID
	{
		get
		{
			return this._CommenterID;
		}
		set
		{
			if ((this._CommenterID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCommenterIDChanging(value);
				this.SendPropertyChanging();
				this._CommenterID = value;
				this.SendPropertyChanged("CommenterID");
				this.OnCommenterIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentTime", DbType="DateTime NOT NULL")]
	public System.DateTime CommentTime
	{
		get
		{
			return this._CommentTime;
		}
		set
		{
			if ((this._CommentTime != value))
			{
				this.OnCommentTimeChanging(value);
				this.SendPropertyChanging();
				this._CommentTime = value;
				this.SendPropertyChanged("CommentTime");
				this.OnCommentTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentStatus", DbType="Bit NOT NULL")]
	public bool CommentStatus
	{
		get
		{
			return this._CommentStatus;
		}
		set
		{
			if ((this._CommentStatus != value))
			{
				this.OnCommentStatusChanging(value);
				this.SendPropertyChanging();
				this._CommentStatus = value;
				this.SendPropertyChanged("CommentStatus");
				this.OnCommentStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feed_Comment", Storage="_Feed", ThisKey="FeedID", OtherKey="FeedID", IsForeignKey=true)]
	public Feed Feed
	{
		get
		{
			return this._Feed.Entity;
		}
		set
		{
			Feed previousValue = this._Feed.Entity;
			if (((previousValue != value) 
						|| (this._Feed.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Feed.Entity = null;
					previousValue.Comment.Remove(this);
				}
				this._Feed.Entity = value;
				if ((value != null))
				{
					value.Comment.Add(this);
					this._FeedID = value.FeedID;
				}
				else
				{
					this._FeedID = default(int);
				}
				this.SendPropertyChanged("Feed");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="CommenterID", OtherKey="UserID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Comment.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Comment.Add(this);
					this._CommenterID = value.UserID;
				}
				else
				{
					this._CommenterID = default(string);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feed")]
public partial class Feed : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FeedID;
	
	private string _Title;
	
	private string _FeedText;
	
	private string _PosterID;
	
	private System.DateTime _PostTime;
	
	private string _ImageID;
	
	private bool _FeedStatus;
	
	private System.Nullable<bool> _ImageStatus;
	
	private EntitySet<Comment> _Comment;
	
	private EntityRef<User> _User;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedIDChanging(int value);
    partial void OnFeedIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnFeedTextChanging(string value);
    partial void OnFeedTextChanged();
    partial void OnPosterIDChanging(string value);
    partial void OnPosterIDChanged();
    partial void OnPostTimeChanging(System.DateTime value);
    partial void OnPostTimeChanged();
    partial void OnImageIDChanging(string value);
    partial void OnImageIDChanged();
    partial void OnFeedStatusChanging(bool value);
    partial void OnFeedStatusChanged();
    partial void OnImageStatusChanging(System.Nullable<bool> value);
    partial void OnImageStatusChanged();
    #endregion
	
	public Feed()
	{
		this._Comment = new EntitySet<Comment>(new Action<Comment>(this.attach_Comment), new Action<Comment>(this.detach_Comment));
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FeedID
	{
		get
		{
			return this._FeedID;
		}
		set
		{
			if ((this._FeedID != value))
			{
				this.OnFeedIDChanging(value);
				this.SendPropertyChanging();
				this._FeedID = value;
				this.SendPropertyChanged("FeedID");
				this.OnFeedIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedText", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string FeedText
	{
		get
		{
			return this._FeedText;
		}
		set
		{
			if ((this._FeedText != value))
			{
				this.OnFeedTextChanging(value);
				this.SendPropertyChanging();
				this._FeedText = value;
				this.SendPropertyChanged("FeedText");
				this.OnFeedTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosterID", DbType="Char(10) NOT NULL", CanBeNull=false)]
	public string PosterID
	{
		get
		{
			return this._PosterID;
		}
		set
		{
			if ((this._PosterID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPosterIDChanging(value);
				this.SendPropertyChanging();
				this._PosterID = value;
				this.SendPropertyChanged("PosterID");
				this.OnPosterIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostTime", DbType="DateTime NOT NULL")]
	public System.DateTime PostTime
	{
		get
		{
			return this._PostTime;
		}
		set
		{
			if ((this._PostTime != value))
			{
				this.OnPostTimeChanging(value);
				this.SendPropertyChanging();
				this._PostTime = value;
				this.SendPropertyChanged("PostTime");
				this.OnPostTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Char(10)")]
	public string ImageID
	{
		get
		{
			return this._ImageID;
		}
		set
		{
			if ((this._ImageID != value))
			{
				this.OnImageIDChanging(value);
				this.SendPropertyChanging();
				this._ImageID = value;
				this.SendPropertyChanged("ImageID");
				this.OnImageIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedStatus", DbType="Bit NOT NULL")]
	public bool FeedStatus
	{
		get
		{
			return this._FeedStatus;
		}
		set
		{
			if ((this._FeedStatus != value))
			{
				this.OnFeedStatusChanging(value);
				this.SendPropertyChanging();
				this._FeedStatus = value;
				this.SendPropertyChanged("FeedStatus");
				this.OnFeedStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageStatus", DbType="Bit")]
	public System.Nullable<bool> ImageStatus
	{
		get
		{
			return this._ImageStatus;
		}
		set
		{
			if ((this._ImageStatus != value))
			{
				this.OnImageStatusChanging(value);
				this.SendPropertyChanging();
				this._ImageStatus = value;
				this.SendPropertyChanged("ImageStatus");
				this.OnImageStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feed_Comment", Storage="_Comment", ThisKey="FeedID", OtherKey="FeedID")]
	public EntitySet<Comment> Comment
	{
		get
		{
			return this._Comment;
		}
		set
		{
			this._Comment.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Feed", Storage="_User", ThisKey="PosterID", OtherKey="UserID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Feed.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Feed.Add(this);
					this._PosterID = value.UserID;
				}
				else
				{
					this._PosterID = default(string);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Comment(Comment entity)
	{
		this.SendPropertyChanging();
		entity.Feed = this;
	}
	
	private void detach_Comment(Comment entity)
	{
		this.SendPropertyChanging();
		entity.Feed = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentReference")]
public partial class StudentReference : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _StudentID;
	
	private string _StudentName;
	
	private EntityRef<User> _User;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnStudentNameChanging(string value);
    partial void OnStudentNameChanged();
    #endregion
	
	public StudentReference()
	{
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				this.OnStudentIDChanging(value);
				this.SendPropertyChanging();
				this._StudentID = value;
				this.SendPropertyChanged("StudentID");
				this.OnStudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string StudentName
	{
		get
		{
			return this._StudentName;
		}
		set
		{
			if ((this._StudentName != value))
			{
				this.OnStudentNameChanging(value);
				this.SendPropertyChanging();
				this._StudentName = value;
				this.SendPropertyChanged("StudentName");
				this.OnStudentNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentReference_User", Storage="_User", ThisKey="StudentID", OtherKey="UserID", IsUnique=true, IsForeignKey=false)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.StudentReference = null;
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.StudentReference = this;
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _UserID;
	
	private string _UserName;
	
	private string _Password;
	
	private bool _Identification;
	
	private bool _UserStatus;
	
	private EntitySet<Comment> _Comment;
	
	private EntitySet<Feed> _Feed;
	
	private EntityRef<StudentReference> _StudentReference;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIdentificationChanging(bool value);
    partial void OnIdentificationChanged();
    partial void OnUserStatusChanging(bool value);
    partial void OnUserStatusChanged();
    #endregion
	
	public User()
	{
		this._Comment = new EntitySet<Comment>(new Action<Comment>(this.attach_Comment), new Action<Comment>(this.detach_Comment));
		this._Feed = new EntitySet<Feed>(new Action<Feed>(this.attach_Feed), new Action<Feed>(this.detach_Feed));
		this._StudentReference = default(EntityRef<StudentReference>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._StudentReference.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identification", DbType="Bit NOT NULL")]
	public bool Identification
	{
		get
		{
			return this._Identification;
		}
		set
		{
			if ((this._Identification != value))
			{
				this.OnIdentificationChanging(value);
				this.SendPropertyChanging();
				this._Identification = value;
				this.SendPropertyChanged("Identification");
				this.OnIdentificationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserStatus", DbType="Bit NOT NULL")]
	public bool UserStatus
	{
		get
		{
			return this._UserStatus;
		}
		set
		{
			if ((this._UserStatus != value))
			{
				this.OnUserStatusChanging(value);
				this.SendPropertyChanging();
				this._UserStatus = value;
				this.SendPropertyChanged("UserStatus");
				this.OnUserStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comment", ThisKey="UserID", OtherKey="CommenterID")]
	public EntitySet<Comment> Comment
	{
		get
		{
			return this._Comment;
		}
		set
		{
			this._Comment.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Feed", Storage="_Feed", ThisKey="UserID", OtherKey="PosterID")]
	public EntitySet<Feed> Feed
	{
		get
		{
			return this._Feed;
		}
		set
		{
			this._Feed.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentReference_User", Storage="_StudentReference", ThisKey="UserID", OtherKey="StudentID", IsForeignKey=true)]
	public StudentReference StudentReference
	{
		get
		{
			return this._StudentReference.Entity;
		}
		set
		{
			StudentReference previousValue = this._StudentReference.Entity;
			if (((previousValue != value) 
						|| (this._StudentReference.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._StudentReference.Entity = null;
					previousValue.User = null;
				}
				this._StudentReference.Entity = value;
				if ((value != null))
				{
					value.User = this;
					this._UserID = value.StudentID;
				}
				else
				{
					this._UserID = default(string);
				}
				this.SendPropertyChanged("StudentReference");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Comment(Comment entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Comment(Comment entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Feed(Feed entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Feed(Feed entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}
#pragma warning restore 1591
